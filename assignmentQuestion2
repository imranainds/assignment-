Q 1   Write a program to accept percentage from the user and display the grade according to the following criteria:
Marks
Grade
>90 A
>80 and <=90 B
>=60 and <=80 C
below 60 D
ANSWER 1 
def get_grade(percentage):
    if percentage > 90:
        return "A"
    elif percentage > 80 and percentage <= 90:
        return "B"
    elif percentage >= 60 and percentage <= 80:
        return "C"
    else:
        return "D"


def main():
    percentage = float(input("Enter your percentage: "))
    grade = get_grade(percentage)
    print("Your grade is: " + grade)


if __name__ == "__main__":
    main()
Q 2 Write a program to accept the cost price of a bike and display the road tax to be paid according to the following criteria:
AVSWER 
def calculate_road_tax(cost_price):
    if cost_price > 100000:
        tax = 0.15 * cost_price
    elif cost_price > 50000 and cost_price <= 100000:
        tax = 0.10 * cost_price
    else:
        tax = 0.05 * cost_price
    return tax


def main():
    cost_price = float(input("Enter the cost price of the bike: "))
    tax = calculate_road_tax(cost_price)
    print("The road tax to be paid is: " + str(tax))

if __name__ == "__main__":
    main()
Q 3 Accept any city from the user and display monuments of that city.


def get_monuments(city):
    if city == "Delhi":
        return ["Red Fort", "Humayun's Tomb", "Qutub Minar"]
    elif city == "Agra":
        return ["Taj Mahal", "Agra Fort", "Fatehpur Sikri"]
    elif city == "Jaipur":
        return ["Jal Mahal", "Amber Fort", "City Palace"]
    else:
        return []


def main():
    city = input("Enter the city name: ")
    monuments = get_monuments(city)
    print("The monuments in " + city + " are: " + str(monuments))


if __name__ == "__main__":
    main()
Q4 Check how many times a given number can be divided by 3 before it is less than or equal to 10.
ANSWER 
def count_divisions(number):
    count = 0
    while number >= 10:
        number = number // 3
        count += 1
    return count


def main():
    number = int(input("Enter a number: "))
    count = count_divisions(number)
    print("The number can be divided by 3 " + str(count) + " times before it is less than or equal to 10.")


if __name__ == "__main__":
    main()
Q5  Why and When to Use while Loop in Python give a detailed description with example
ANSWER 
A while loop is a programming construct that allows you to execute a block of code repeatedly, as long as a certain condition is met. The syntax for a while loop in Python is as follows:

Python
while condition:
    # block of code to be executed repeatedly
Use code with caution. Learn more
The condition is a Boolean expression that evaluates to either True or False. If the condition is True, the block of code inside the while loop will be executed. If the condition is False, the loop will terminate.

While loops are used when you want to execute a block of code repeatedly, but you don't know how many times the block of code needs to be executed. For example, you might use a while loop to count the number of times a user enters a correct password.

Here is an example of a while loop in Python:

Python
number = 1
while number <= 10:
    print(number)
    number += 1
Use code with caution. Learn more
This code will print the numbers from 1 to 10. The while loop will continue to execute as long as the number is less than or equal to 10. Once the number is greater than 10, the condition will be False, and the loop will terminate.
Q6. Use nested while loop to print 3 different pattern.
ANSWER 
Pattern 1:

Python
i = 1
while i <= 5:
    j = 1
    while j <= i:
        print(i, end=" ")
        j += 1
    print()
    i += 1
Use code with caution. Learn more
This pattern will print a pyramid of numbers, starting with 1 at the top and increasing by 1 for each row.

Pattern 2:

Python
i = 5
while i >= 1:
    j = 1
    while j <= i:
        print(j, end=" ")
        j += 1
    print()
    i -= 1
Use code with caution. Learn more
This pattern will print a pyramid of numbers, starting with 5 at the top and decreasing by 1 for each row.

Pattern 3:

Python
i = 1
while i <= 5:
    j = 1
    while j <= 5 - i:
        print(" ", end=" ")
        j += 1
    k = 1
    while k <= i:
        print(k, end=" ")
        k += 1
    print()
    i += 1
Use code with caution. Learn more
This pattern will print a diamond of numbers, starting with 1 in the middle and increasing by 1 for each row on the left and decreasing by 1 for each row on the right.

Here is an explanation of how the code for each pattern works:

Pattern 1:

The outer while loop iterates from 1 to 5. The inner while loop iterates from 1 to the current value of the outer loop counter. The print statement in the inner loop prints the current value of the outer loop counter. The outer loop then increments its counter and repeats.

Pattern 2:

The outer while loop iterates from 5 to 1. The inner while loop iterates from 1 to the current value of the outer loop counter. The print statement in the inner loop prints the current value of the inner loop counter. The outer loop then decrements its counter and repeats.

Pattern 3:

The outer while loop iterates from 1 to 5. The first inner while loop iterates from 1 to 5 - the current value of the outer loop counter. This prints 5 spaces at the beginning of each row. The second inner while loop iterates from 1 to the current value of the outer loop counter. This prints the current value of the inner loop counter. The outer loop then increments its counter and repeats.
Q7. Reverse a while loop to display numbers from 10 to 1.
ANSWER
here is the code to reverse a while loop to display numbers from 10 to 1:

Python
number = 10
while number >= 1:
    print(number)
    number -= 1
Use code with caution. Learn more
This code will print the numbers from 10 to 1, in reverse order.

Here is an explanation of how the code works:

The while loop starts with the value number set to 10. The while loop condition is number >= 1, which means that the loop will continue to execute as long as the value of number is greater than or equal to 1.

The print() statement inside the while loop prints the current value of number. The number variable is then decremented by 1, and the while loop condition is checked again. If the condition is still true, the print() statement will be executed again, and the number variable will be decremented again. This process will continue until the value of number is less than 1, at which point the while loop will terminate.

The output of the code will be the numbers from 10 to 1, printed in reverse order.
Q8. Reverse a while loop to display numbers from 10 to 1
ANSWER
here is the code to reverse a while loop to display numbers from 10 to 1, with a space between each number:

Python
number = 10
while number >= 1:
    print(number, end=" ")
    number -= 1
Use code with caution. Learn more
This code will print the numbers from 10 to 1, in reverse order, with a space between each number.

Here is an explanation of how the code works:

The while loop starts with the value number set to 10. The while loop condition is number >= 1, which means that the loop will continue to execute as long as the value of number is greater than or equal to 1.

The print() statement inside the while loop prints the current value of number, with a space after it. The number variable is then decremented by 1, and the while loop condition is checked again. If the condition is still true, the print() statement will be executed again, with the current value of number, and the number variable will be decremented again. This process will continue until the value of number is less than 1, at which point the while loop will terminate.

The output of the code will be the numbers from 10 to 1, printed in reverse order, with a space between each number.
